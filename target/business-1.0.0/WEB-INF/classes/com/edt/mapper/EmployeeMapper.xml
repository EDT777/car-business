<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.edt.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.edt.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="admin" property="admin" jdbcType="BIT"/>
        <result column="username" property="username"/>
        <result column="status" property="status"/>
        <result column="dept_id" property="dept.id"/>
        <result column="d_id" property="dept.id"/>
        <result column="d_name" property="dept.name"/>
        <result column="d_sn" property="dept.sn"/>
    </resultMap>
    <resultMap id="BaseResultMap2" type="com.edt.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="admin" property="admin" jdbcType="BIT"/>
        <result column="username" property="username"/>
        <result column="dept_id" property="dept.id"/>
        <collection property="roles" select="com.edt.mapper.RoleMapper.selectByEmpId" column="id"></collection>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from employee
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.edt.domain.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into employee (username, name, password, email,
                              age, admin, dept_id, status)
        values (#{username}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
                #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT}, #{status})
    </insert>

    <insert id="insertRelation">
        insert into employee_role (employee_id, role_id) values
        <foreach collection="roleIds" separator="," item="item">
            (#{empId},#{item})
        </foreach>
    </insert>

    <delete id="deleteRelation">
        delete
        from employee_role
        where employee_id = #{id}
    </delete>
    <delete id="batchDelete">
        delete from employee where id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>
    <delete id="batchDeleteRelation">
        delete from employee_role where employee_id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>
    <update id="updateByPrimaryKey" parameterType="com.edt.domain.Employee">
        update employee
        set name    = #{name,jdbcType=VARCHAR},
            email   = #{email,jdbcType=VARCHAR},
            age     = #{age,jdbcType=INTEGER},
            admin   = #{admin,jdbcType=BIT},
            dept_id = #{dept.id,jdbcType=BIGINT},
            status  = #{status}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updatePassword" parameterType="com.edt.domain.Employee">
        update employee
        set password =#{password}
        where id =#{id}
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap2" parameterType="java.lang.Long">
        select id,
               username,
               name,
               password,
               email,
               age,
               admin,
               dept_id,
               status
        from employee
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select id,
               username,
               name,
               password,
               email,
               age,
               admin,
               dept_id
        from employee
    </select>

    <sql id="where_sql">
        <where>
            <if test="keyword != null and keyword != ''">
                and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
            </if>
            <if test="deptId !=null">
                and e.dept_id = #{deptId}
            </if>
        </where>
    </sql>
    <select id="selectForList" resultMap="BaseResultMap">
        select e.id,e.status,e.name,e.username,e.password,e.email,e.age,e.admin,e.dept_id,d.id as d_id,d.name as
        d_name,d.sn as d_sn
        from employee e left join department d on e.dept_id = d.id
        <include refid="where_sql"/>
    </select>
    <select id="selectByUsernameAndPassword" resultType="com.edt.domain.Employee">
        select id,
               name,
               password,
               email,
               age,
               admin,
               dept_id,
               status
        from employee
        where username = binary (#{username})
          and password = binary (#{password})
    </select>
    <select id="selectByUsername" resultType="com.edt.domain.Employee">
        select id,
               name,
               password,
               email,
               age,
               admin,
               dept_id,
               status
        from employee
        where username = binary (#{username})
    </select>
</mapper>